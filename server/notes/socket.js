Socket {
    nsp: Namespace {
      name: '/',
      server: Server {
        nsps: [Object],
        parentNsps: Map {},
        _path: '/socket.io',
        _serveClient: false,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function],
        _origins: '*:*',
        sockets: [Circular],
        middleware: [Object],
        middlewares: [Getter],
        controller: [Object],
        controllers: [Getter],
        eio: [Server],
        httpServer: [Server],
        engine: [Server]
      },
      sockets: {
        R4XZa_wjaT_ckgBSAAAA: [Socket],
        pwf_UJyw5amMlDfXAAAB: [Circular],
        'LC-K9KFBjG_XNpvjAAAC': [Socket]
      },
      connected: {
        R4XZa_wjaT_ckgBSAAAA: [Socket],
        pwf_UJyw5amMlDfXAAAB: [Circular],
        'LC-K9KFBjG_XNpvjAAAC': [Socket]
      },
      fns: [ [Function] ],
      ids: 0,
      rooms: [],
      flags: {},
      adapter: Redis {
        nsp: [Circular],
        rooms: [Object],
        sids: [Object],
        encoder: Encoder {},
        uid: 'JKQm8Y',
        prefix: 'socket.io',
        requestsTimeout: 5000,
        channel: 'socket.io#/#',
        requestChannel: 'socket.io-request#/#',
        responseChannel: 'socket.io-response#/#',
        requests: {},
        customHook: [Function],
        channelMatches: [Function],
        pubClient: [RedisClient],
        subClient: [RedisClient]
      },
      _events: [Object: null prototype] { connection: [Function] },
      _eventsCount: 1,
      [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: Map { 'exchange' => [Function] }
    },
    server: Server {
      nsps: { '/': [Namespace], '/example': [Namespace] },
      parentNsps: Map {},
      _path: '/socket.io',
      _serveClient: false,
      parser: {
        protocol: 4,
        types: [Array],
        CONNECT: 0,
        DISCONNECT: 1,
        EVENT: 2,
        ACK: 3,
        ERROR: 4,
        BINARY_EVENT: 5,
        BINARY_ACK: 6,
        Encoder: [Function: Encoder],
        Decoder: [Function: Decoder]
      },
      encoder: Encoder {},
      _adapter: [Function: Redis] {
        uid: 'JKQm8Y',
        pubClient: [RedisClient],
        subClient: [RedisClient],
        prefix: 'socket.io',
        requestsTimeout: 5000
      },
      _origins: '*:*',
      sockets: Namespace {
        name: '/',
        server: [Circular],
        sockets: [Object],
        connected: [Object],
        fns: [Array],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Redis],
        _events: [Object: null prototype],
        _eventsCount: 1,
        [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: [Map]
      },
      middleware: { auth: [AsyncFunction] },
      middlewares: [Getter],
      controller: { nsp: [Object] },
      controllers: [Getter],
      eio: Server {
        clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [WebSocketServer],
        _events: [Object: null prototype],
        _eventsCount: 1
      },
      httpServer: Server {
        _events: [Object: null prototype],
        _eventsCount: 7,
        _maxListeners: undefined,
        _connections: 0,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '4:127.0.0.1:55014',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(asyncId)]: 187
      },
      engine: Server {
        clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [WebSocketServer],
        _events: [Object: null prototype],
        _eventsCount: 1
      }
    },
    adapter: Redis {
      nsp: Namespace {
        name: '/',
        server: [Server],
        sockets: [Object],
        connected: [Object],
        fns: [Array],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Circular],
        _events: [Object: null prototype],
        _eventsCount: 1,
        [Symbol(EGG-SOCKET.IO#ROUTERCONFIG)]: [Map]
      },
      rooms: {
        '1': [Room],
        '2': [Room],
        R4XZa_wjaT_ckgBSAAAA: [Room],
        pwf_UJyw5amMlDfXAAAB: [Room],
        'LC-K9KFBjG_XNpvjAAAC': [Room]
      },
      sids: {
        R4XZa_wjaT_ckgBSAAAA: [Object],
        pwf_UJyw5amMlDfXAAAB: [Object],
        'LC-K9KFBjG_XNpvjAAAC': [Object]
      },
      encoder: Encoder {},
      uid: 'JKQm8Y',
      prefix: 'socket.io',
      requestsTimeout: 5000,
      channel: 'socket.io#/#',
      requestChannel: 'socket.io-request#/#',
      responseChannel: 'socket.io-response#/#',
      requests: {},
      customHook: [Function],
      channelMatches: [Function],
      pubClient: RedisClient {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        address: '127.0.0.1:6379',
        connection_options: [Object],
        connection_id: 0,
        connected: true,
        ready: true,
        should_buffer: false,
        max_attempts: 0,
        command_queue: [Deque],
        offline_queue: [Deque],
        pipeline_queue: [Deque],
        connect_timeout: 3600000,
        enable_offline_queue: true,
        retry_max_delay: null,
        retry_timer: null,
        retry_totaltime: 0,
        retry_delay: 200,
        retry_backoff: 1.7,
        attempts: 1,
        pub_sub_mode: 0,
        subscription_set: {},
        monitoring: false,
        message_buffers: false,
        closing: false,
        server_info: [Object],
        auth_pass: undefined,
        selected_db: undefined,
        old_state: null,
        fire_strings: false,
        pipeline: false,
        sub_commands_left: 0,
        times_connected: 1,
        buffers: false,
        options: [Object],
        reply: 'ON',
        reply_parser: [JavascriptRedisParser],
        stream: [Socket],
        emitted_end: false,
        cork: [Function],
        uncork: [Function]
      },
      subClient: RedisClient {
        _events: [Object: null prototype],
        _eventsCount: 4,
        _maxListeners: undefined,
        address: '127.0.0.1:6379',
        connection_options: [Object],
        connection_id: 1,
        connected: true,
        ready: true,
        should_buffer: false,
        max_attempts: 0,
        command_queue: [Deque],
        offline_queue: [Deque],
        pipeline_queue: [Deque],
        connect_timeout: 3600000,
        enable_offline_queue: true,
        retry_max_delay: null,
        retry_timer: null,
        retry_totaltime: 0,
        retry_delay: 200,
        retry_backoff: 1.7,
        attempts: 1,
        pub_sub_mode: 1,
        subscription_set: [Object],
        monitoring: false,
        message_buffers: true,
        closing: false,
        server_info: [Object],
        auth_pass: undefined,
        selected_db: undefined,
        old_state: null,
        fire_strings: true,
        pipeline: false,
        sub_commands_left: 0,
        times_connected: 1,
        buffers: false,
        options: [Object],
        reply: 'ON',
        reply_parser: [JavascriptRedisParser],
        stream: [Socket],
        handle_reply: [Function: handle_detect_buffers_reply],
        emitted_end: false,
        cork: [Function],
        uncork: [Function]
      }
    },
    id: 'pwf_UJyw5amMlDfXAAAB',
    client: Client {
      server: Server {
        nsps: [Object],
        parentNsps: Map {},
        _path: '/socket.io',
        _serveClient: false,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function],
        _origins: '*:*',
        sockets: [Namespace],
        middleware: [Object],
        middlewares: [Getter],
        controller: [Object],
        controllers: [Getter],
        eio: [Server],
        httpServer: [Server],
        engine: [Server]
      },
      conn: Socket {
        id: 'pwf_UJyw5amMlDfXAAAB',
        server: [Server],
        upgrading: false,
        upgraded: false,
        readyState: 'open',
        writeBuffer: [],
        packetsFn: [],
        sentCallbackFn: [],
        cleanupFn: [Array],
        request: [IncomingMessage],
        remoteAddress: '::ffff:127.0.0.1',
        checkIntervalTimer: null,
        upgradeTimeoutTimer: null,
        pingTimeoutTimer: Timeout {
          _idleTimeout: 30000,
          _idlePrev: [TimersList],
          _idleNext: [Timeout],
          _idleStart: 8279,
          _onTimeout: [Function],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: true,
          [Symbol(asyncId)]: 334,
          [Symbol(triggerId)]: 330
        },
        transport: [WebSocket],
        _events: [Object: null prototype],
        _eventsCount: 3
      },
      encoder: Encoder {},
      decoder: Decoder { reconstructor: null, _callbacks: [Object] },
      id: 'pwf_UJyw5amMlDfXAAAB',
      request: IncomingMessage {
        _readableState: [ReadableState],
        readable: true,
        _events: [Object: null prototype],
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: true,
        url: '/socket.io/?room=2&userId=client_0.3637108678411811&EIO=3&transport=websocket',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        parser: null,
        _query: [Object: null prototype],
        websocket: [WebSocket],
        args: [Array]
      },
      onclose: [Function: bound ],
      ondata: [Function: bound ],
      onerror: [Function: bound ],
      ondecoded: [Function: bound ],
      sockets: { pwf_UJyw5amMlDfXAAAB: [Circular] },
      nsps: { '/': [Circular] },
      connectBuffer: []
    },
    conn: Socket {
      id: 'pwf_UJyw5amMlDfXAAAB',
      server: Server {
        clients: [Object],
        clientsCount: 3,
        wsEngine: 'ws',
        pingTimeout: 5000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: undefined,
        ws: [WebSocketServer],
        _events: [Object: null prototype],
        _eventsCount: 1
      },
      upgrading: false,
      upgraded: false,
      readyState: 'open',
      writeBuffer: [],
      packetsFn: [],
      sentCallbackFn: [],
      cleanupFn: [ [Function], [Function] ],
      request: IncomingMessage {
        _readableState: [ReadableState],
        readable: true,
        _events: [Object: null prototype],
        _eventsCount: 1,
        _maxListeners: undefined,
        socket: [Circular],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: true,
        url: '/socket.io/?room=2&userId=client_0.3637108678411811&EIO=3&transport=websocket',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        parser: null,
        _query: [Object: null prototype],
        websocket: [WebSocket],
        args: [Array]
      },
      remoteAddress: '::ffff:127.0.0.1',
      checkIntervalTimer: null,
      upgradeTimeoutTimer: null,
      pingTimeoutTimer: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 8279,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: true,
        [Symbol(asyncId)]: 334,
        [Symbol(triggerId)]: 330
      },
      transport: WebSocket {
        readyState: 'open',
        discarded: false,
        socket: [WebSocket],
        writable: true,
        perMessageDeflate: [Object],
        supportsBinary: true,
        _events: [Object: null prototype],
        _eventsCount: 5,
        sid: 'pwf_UJyw5amMlDfXAAAB',
        req: [IncomingMessage]
      },
      _events: [Object: null prototype] {
        close: [Array],
        data: [Function: bound ],
        error: [Function: bound ]
      },
      _eventsCount: 3
    },
    rooms: { '2': '2', pwf_UJyw5amMlDfXAAAB: 'pwf_UJyw5amMlDfXAAAB' },
    acks: {},
    connected: true,
    disconnected: false,
    handshake: {
      headers: {
        host: '127.0.0.1:7001',
        connection: 'Upgrade',
        pragma: 'no-cache',
        'cache-control': 'no-cache',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36',
        upgrade: 'websocket',
        origin: 'http://127.0.0.1:7001',
        'sec-websocket-version': '13',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'zh-CN,zh;q=0.9',
        'sec-websocket-key': 'SQq2uH3iSdA45J0Ct/4X7Q==',
        'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits'
      },
      time: 'Mon Jan 27 2020 17:09:55 GMT+0800 (GMT+08:00)',
      address: '::ffff:127.0.0.1',
      xdomain: true,
      secure: false,
      issued: 1580116195102,
      url: '/socket.io/?room=2&userId=client_0.3637108678411811&EIO=3&transport=websocket',
      query: {
        room: '2',
        userId: 'client_0.3637108678411811',
        EIO: '3',
        transport: 'websocket'
      }
    },
    fns: [ [Function] ],
    flags: {},
    _rooms: [],
    _events: [Object: null prototype] {
      disconnect: [Function: bound onceWrapper] { listener: [Function] },
      exchange: [Function]
    },
    _eventsCount: 2
  }